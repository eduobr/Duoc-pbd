--SQL
--1
SELECT E.EJE_RUT|| '-' ||E.EJE_DV  RUT_EJECUTIVO, 
E.EJE_NOMBRE || ' ' || E.EJE_APELLIDO_PATERNO || ' ' || E.EJE_APELLIDO_MATERNO AS NOMBRE_EJECUTIVO, COUNT(C.CLI_RUT) CONTACTO_CARTERA,
 SYSDATE FECHA_REPORTE
FROM EJECUTIVOS E JOIN CLIENTES C ON(E.EJE_RUT=C.EJE_RUT) JOIN BITACORA_CONTACTO B ON(B.CLI_RUT=C.CLI_RUT) 
WHERE EXTRACT (MONTH FROM B.BIT_FECHA) BETWEEN 4 AND 6
AND (B.ID_MEDIO=1 OR B.ID_MEDIO=3 OR B.ID_MEDIO=5) 
AND (B.ID_MOTIVO=1 OR B.ID_MOTIVO=2 OR B.ID_MOTIVO=3)
GROUP BY E.EJE_RUT,E.EJE_DV, E.EJE_NOMBRE, E.EJE_APELLIDO_PATERNO, E.EJE_APELLIDO_MATERNO, B.BIT_FECHA
ORDER BY 2 DESC;

--2
SELECT J.JEF_RUT|| '-' ||J.JEF_DV RUT_JEFE, J.JEF_NOMBRE || ' ' || J.JEF_APELLIDO_PATERNO || ' '|| J.JEF_APELLIDO_MATERNO NOMBRE_JEFE  , COUNT(E.EJE_RUT) EJECUTIVOS,
TO_CHAR(S.SUE_PERIODO,'MM/YYYY') PERIODO, SUM(S.SUE_COMISION) COMISIONES
FROM EJECUTIVOS E JOIN JEFES J ON(E.JEF_RUT=J.JEF_RUT) JOIN SUELDOS S ON(S.EJE_RUT=E.EJE_RUT)
WHERE EXTRACT(MONTH FROM S.SUE_PERIODO) BETWEEN 1 AND 3
GROUP BY J.JEF_RUT,J.JEF_DV,J.JEF_NOMBRE,J.JEF_APELLIDO_PATERNO,J.JEF_APELLIDO_MATERNO,S.SUE_PERIODO
ORDER BY 2,4;

--PL/SQL
--1
CREATE SEQUENCE SEQ_IDLOG;
CREATE OR REPLACE TRIGGER TRG_REGITR_BIT
 BEFORE INSERT OR UPDATE OR DELETE ON BITACORA_CONTACTO
 FOR EACH ROW
BEGIN
 IF INSERTING THEN
  INSERT INTO REGISTRO_LOG VALUES(SEQ_IDLOG.NEXTVAL,SYSDATE,'INGRESO BITACORA',:NEW.BIT_VIGENCIA);
 ELSIF UPDATING THEN
  INSERT INTO REGISTRO_LOG VALUES(SEQ_IDLOG.NEXTVAL,SYSDATE,'ACTUALIZACION BITACORA',:NEW.BIT_VIGENCIA);
  ELSIF DELETING THEN
  INSERT INTO REGISTRO_LOG VALUES(SEQ_IDLOG.NEXTVAL,SYSDATE,'ELIMINACION BITACORA',:OLD.BIT_VIGENCIA);
 END IF;
END;

INSERT INTO BITACORA_CONTACTO(ID_BITACORA,BIT_FECHA,BIT_DESCRIPCION,BIT_VIGENCIA,ID_MEDIO,ID_MOTIVO,CLI_RUT) VALUES(202,SYSDATE,'REGISTRO BITACORA 89',1,1,1,6868859);
UPDATE BITACORA_CONTACTO SET BIT_VIGENCIA=2 WHERE ID_BITACORA = 202;
DELETE FROM BITACORA_CONTACTO WHERE ID_BITACORA = 202;
SELECT * FROM REGISTRO_LOG;

--2
--a)
CREATE OR REPLACE PACKAGE PKG_SUELDO IS
 v_sueldo_final NUMBER;
 FUNCTION FN_SUELDO_FINAL(RUT VARCHAR2,FECHA DATE) RETURN NUMBER;
 FUNCTION FN_COMISION(IDSUELDO NUMBER) RETURN NUMBER;
END PKG_SUELDO;

CREATE OR REPLACE PACKAGE BODY PKG_SUELDO IS
 FUNCTION FN_SUELDO_FINAL(RUT VARCHAR2,FECHA DATE) RETURN NUMBER IS
 BEGIN
  SELECT SUE_MONTO_BASE+SUE_COMISION-(SUE_MONTO_BASE+SUE_COMISION+SUE_BONO)*0.07-(SUE_MONTO_BASE+SUE_COMISION+SUE_BONO)*0.10
  INTO v_sueldo_final FROM SUELDOS
  WHERE EJE_RUT=RUT AND EXTRACT(MONTH FROM SUE_PERIODO)=EXTRACT (MONTH FROM FECHA);
  RETURN v_sueldo_final;
 END FN_SUELDO_FINAL;
 FUNCTION FN_COMISION(IDSUELDO NUMBER)
 RETURN NUMBER
 IS 
  V_COMISION NUMBER;
 BEGIN
  SELECT (SUE_MONTO_BASE*0.2)INTO V_COMISION FROM SUELDOS WHERE ID_SUELDO = IDSUELDO;
  RETURN V_COMISION;
 END FN_COMISION;
END PKG_SUELDO;

DECLARE
 v_comision NUMBER;
 v_sueldo_total NUMBER;
 CURSOR cr_sueldo IS
 SELECT EJE_RUT "RUT",SUE_PERIODO "FECHA",ID_SUELDO FROM SUELDOS;
BEGIN
 FOR reg_datos IN cr_sueldo
 LOOP
 v_sueldo_total:=PKG_SUELDO.FN_SUELDO_FINAL(reg_datos.RUT,reg_datos.FECHA);
 v_comision:=PKG_SUELDO.FN_COMISION(reg_datos.ID_SUELDO);
 DBMS_OUTPUT.PUT_LINE('sueldo:   '||v_sueldo_total);
 DBMS_OUTPUT.PUT_LINE('comision: '||v_comision);
 END LOOP;
END;

--b)
CREATE OR REPLACE FUNCTION FN_ISAPRE(RUT VARCHAR2,FECHA DATE)
RETURN NUMBER
IS 
V_ISAPRE NUMBER;
BEGIN
SELECT (SUE_MONTO_BASE+SUE_COMISION+SUE_BONO)*0.07 INTO V_ISAPRE FROM SUELDOS WHERE EJE_RUT = RUT AND TO_CHAR(SUE_PERIODO,'DD/MM/YYYY')=FECHA AND
SUE_PERIODO BETWEEN TO_DATE('01/01/2016', 'dd/mm/yyyy') AND TO_DATE('01/02/2016', 'dd/mm/yyyy');
RETURN V_ISAPRE;
END FN_ISAPRE;

CREATE OR REPLACE FUNCTION FN_AFP(RUT VARCHAR2,FECHA DATE)
RETURN NUMBER
IS 
V_AFP NUMBER;
BEGIN
SELECT (SUE_MONTO_BASE+SUE_COMISION+SUE_BONO)*0.10 INTO V_AFP FROM SUELDOS WHERE EJE_RUT = RUT AND TO_CHAR(SUE_PERIODO,'DD/MM/YYYY')=FECHA AND
SUE_PERIODO BETWEEN TO_DATE('01/01/2016', 'dd/mm/yyyy') AND TO_DATE('01/02/2016', 'dd/mm/yyyy');
RETURN V_AFP;
END FN_AFP;

DECLARE
v_isapre NUMBER;
v_afp NUMBER;
BEGIN
v_isapre:=FN_ISAPRE('18936554',TO_DATE('01/01/2016', 'dd/mm/yyyy'));
v_afp:=FN_AFP('18936554',TO_DATE('01/01/2016', 'dd/mm/yyyy'));
DBMS_OUTPUT.PUT_LINE('isapre: '||v_isapre);
DBMS_OUTPUT.PUT_LINE('afp: '||v_afp);
END;
--c)
CREATE OR REPLACE PROCEDURE PR_FINAL IS
CURSOR CR_EJECUTIVOS IS
SELECT * FROM SUELDOS WHERE SUE_PERIODO BETWEEN TO_DATE('01/01/2016', 'dd/mm/yyyy') AND TO_DATE('31/01/2016', 'dd/mm/yyyy');
 V_COM NUMBER;
 V_AFP NUMBER;
 V_ISAPRE NUMBER;
 V_SUELDO NUMBER;
BEGIN
FOR REG_EJE IN CR_EJECUTIVOS
   LOOP
    V_AFP:=FN_AFP(REG_EJE.EJE_RUT,REG_EJE.SUE_PERIODO);
    V_ISAPRE:=FN_ISAPRE(REG_EJE.EJE_RUT,REG_EJE.SUE_PERIODO);
    V_COM := PKG_SUELDO.FN_COMISION(REG_EJE.ID_SUELDO);
    V_SUELDO := PKG_SUELDO.FN_SUELDO_FINAL(REG_EJE.EJE_RUT,REG_EJE.SUE_PERIODO);
         INSERT INTO PAGO_EJECUTIVOS(PAG_PERIODO,PAG_RUT_EJECUTIVO,PAG_SUE_BASE,PAG_SUE_COMISION,PAG_SUE_BONO,PAG_AFP,PAG_ISAPRE,PAG_SUE_TOTAL)
         VALUES(REG_EJE.SUE_PERIODO,REG_EJE.EJE_RUT,REG_EJE.SUE_MONTO_BASE,V_COM,REG_EJE.SUE_BONO,V_AFP,V_ISAPRE,V_SUELDO);
  END LOOP;
END;

EXEC PR_FINAL;

SELECT * FROM PAGO_EJECUTIVOS;

--EXEPCIONES
CREATE TABLE REGISTRO_ERROR
(
  id_error INTEGER NOT NULL,
  nom_subprograma VARCHAR2 (1000) NOT NULL,
  error_mensaje VARCHAR2 (1000) NOT NULL
);
ALTER TABLE REGISTRO_ERROR ADD CONSTRAINT REGISTRO_ERROR_PK PRIMARY KEY(id_error);
SELECT * FROM REGISTRO_ERROR;

CREATE SEQUENCE SEQ_ID_ERROR;

CREATE OR REPLACE TRIGGER TRG_RESTRINGE_FECHA
BEFORE INSERT OR UPDATE OR DELETE ON PAGO_EJECUTIVOS
FOR EACH ROW
BEGIN
 IF TO_CHAR(:NEW.PAG_PERIODO,'MM')<>'01' THEN
  IF INSERTING THEN
  INSERT INTO REGISTRO_ERROR VALUES(SEQ_ID_ERROR.NEXTVAL,'TR_RESTRINGE_FECHA','NO SE PUEDE INSERTAR EMPLEADO');
  RAISE_APPLICATION_ERROR(-20505, 'No se puede insertar empleado mes fuera de rango');
  END IF;
END IF;
END;

INSERT INTO PAGO_EJECUTIVOS VALUES(SYSDATE,'18068059',300000,10000,9000,5000,40000,500000);